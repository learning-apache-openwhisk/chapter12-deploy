#cloud-config
## For the master, use this as-is, then login into
## and execute: kube-init <your-public-ip>
## For the workers, add after the `#cloud-config` line the commands  
## shown by kube-init when it finish running.
##
## If you do not have an user, you may set your password
## uncommenting the following section;
## change the password 'Change-me!' with your password
#chpasswd:
# list:
# - ubuntu:Change-me!
## if you have a ssh-key in a public server (for example, GitHub) you can also att it;
## replace 'your-github-user' with your GitHub user (you need to have an SSH key there).
#ssh_import_id:
#- gh:your-github-user
## If you edit past this line, you REALLY need to know what you do.
packages: 
    # if you change kubernetes version...
    - kubeadm=1.14.0-00
    - kubelet=1.14.0-00
    - kubectl=1.14.0-00
    # ...also use a SUPPORTED docker version for it
    - docker-ce=18.06.2~ce~3-0~ubuntu
    - apt-transport-https
    - ntp
    - jq
growpart:
    mode: auto
    devices: ["/"]
manage_etc_hosts: localhost
locale: "en_US.UTF-8"
apt_update: true
apt_upgrade: true
apt:
  sources:
      docker:
          keyid: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"
          source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
      kubernetes:
          keyid: "54A647F9048D5688D7DA2ABE6A030B21BA07F4FB"
          source: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
package_update: true
package_upgrade: true
package_reboot_if_required: true
write_files:
  - path: /etc/environment
    content: |
      LC_ALL=en_US.UTF-8
      LANG=en_US.UTF-8
      KUBECONFIG=/etc/kubernetes/admin.conf
  - path: /etc/modules
    content: |
      ip_vs
      ip_vs_rr
      ip_vs_wrr
      ip_vs_sh
      nf_conntrack_ipv4
  - path: /etc/sysctl.d/50-kube.conf
    content: |
      net.ipv4.ip_forward=1
      net.bridge.bridge-nf-call-ip6tables=1
      net.bridge.bridge-nf-call-iptables=1
  - path: /etc/rc.local
    permissions: '0755'
    content: |
      #!/bin/sh
      cat /etc/modules | xargs -L1 modprobe
      cat /etc/sysctl.d/50-kube.conf | xargs -L1 sysctl
  - path: /usr/local/bin/kube-init
    permissions: 0755
    content: |
          #!/bin/bash
          PUB_IP=${1:?external ip}
          PUB_PORT=${2:-6443}
          if test "$(whoami)" != root
          then echo "Please, run me as 'sudo $0 $@'" ; exit 1
          fi
          echo "*** Waiting for Cloud-Init to finish:"
          cloud-init status --wait
          source /etc/rc.local
          echo "*** Kubernetes Pulling Images:"
          kubeadm config images pull
          echo "*** Kubernetes Initializing:"
          kubeadm init \
          --apiserver-advertise-address "0.0.0.0" \
          --apiserver-cert-extra-sans "$PUB_IP" \
          --apiserver-bind-port "$PUB_PORT" | tee /tmp/kubeadm.log
          echo "*** Installing Weave:"
          export K8S_VERSION="$(kubectl version | base64 | tr -d '\n')"
          export WEAVE_URL="https://cloud.weave.works/k8s/net?k8s-version=$K8S_VERSION"
          kubectl apply -f "$WEAVE_URL"
          echo "*** Waiting for Kubernetes to get ready:"
          STATE="NotReady"
          while test "$STATE" != "Ready" ; do 
          STATE=$(kubectl get node | tail -1 | awk '{print $2}')
          echo -n "." ; sleep 1
          done
          echo ""
          if grep "kubeadm join" /tmp/kubeadm.log >/dev/null
          then kubeadm token create --ttl 0 --print-join-command >/etc/kubernetes/kubeadm-join.sh
          awk '{ $3 = "'$PUB_IP:$PUB_PORT'"; print }' </etc/kubernetes/kubeadm-join.sh >/etc/kubernetes/kubeadm-join-ext.sh 
          echo "*** If you have a private network, add to Cloud-Init for Workers:"
          echo "runcmd:"
          echo "- $(cat /etc/kubernetes/kubeadm-join.sh)"
          echo "*** If you only have a public network, add to Cloud-Init for Workers:"
          echo "runcmd:"
          echo "- $(cat /etc/kubernetes/kubeadm-join-ext.sh)"
          else echo "*** Something went wrong - check connectivity"
          fi
  - path: /usr/local/bin/kube-provision
    permissions: 0755
    content: |
          #!/bin/bash
          export TRAEFIK_URL="https://github.com/containous/traefik/releases/download/v1.7.6/traefik_linux-amd64"
          export ROOK_URL="https://raw.githubusercontent.com/rook/rook/release-0.9/cluster/examples/kubernetes/ceph"
          if test "$(whoami)" != root
          then echo "Please, run me as 'sudo $0 $@'" ; exit 1
          fi
          cd /etc/kubernetes
          if ! test -e rook-operator.yaml
          then echo "*** Installing Rook ***"
              curl "$ROOK_URL/operator.yaml" >rook-operator.yaml
              kubectl apply -f rook-operator.yaml
          fi
          if ! test -e rook-cluster.yaml
          then curl "$ROOK_URL/cluster.yaml" >rook-cluster.yaml
              kubectl apply -f rook-cluster.yaml
          fi
          if ! test -e rook-storageclass.yaml
          then curl "$ROOK_URL/storageclass.yaml" | sed -e 's/fstype: xfs/fstype: ext4/' >rook-storageclass.yaml
               kubectl apply -f rook-storageclass.yaml
               kubectl patch storageclass rook-ceph-block \
               -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
          fi
          if ! test -e /usr/sbin/traefik
          then echo "*** Installing Traefik ***"
               curl -L "$TRAEFIK_URL" -o /usr/sbin/traefik
               chmod +x /usr/sbin/traefik
          fi
          if ! test -e /etc/traefik.toml
          then kubectl apply -f /usr/local/etc/traefik.yaml
               export TOKEN=$(kubectl --namespace kube-system get secret -o json |\
          jq '.items[]|select(.metadata.name|contains("traefik-ingress-controller"))|.data.token' -r |\
          base64 -d)
               export ENDPOINT="`cat /etc/kubernetes/kubeadm-join.sh | awk '/kubeadm/ { print "https://" $3 }'`"
               envsubst </usr/local/etc/traefik.toml >/etc/traefik.toml
               envsubst </usr/local/etc/traefik.service  >/etc/systemd/system/traefik.service
               systemctl enable traefik
               systemctl restart traefik
          fi
          if test -z "$2"
          then echo "HTTPS with Let's encrypt not configured." 
               echo "To configure it, get a domain name and run:"
               echo "acme <your-domain> <your-email>"
          else /usr/local/bin/acme-config "$@"
          fi
  - path: /usr/local/bin/acme-config
    permissions: 0755
    content: |
          #!/bin/sh
          if test "$(whoami)" != root
          then echo "Please, run me as 'sudo $0 $@'" ; exit 1
          fi
          DOMAIN=${1:?DOMAIN}
          EMAIL=${2:?EMAIL}
          shift 2
          if fgrep '[acme]' /etc/traefik.toml
          then echo "Acme already installed"; exit
          fi
          echo "*** Installing Let's Encrypt Certificate ***"
          cat <<EOF >>/etc/traefik.toml
          [acme]
          email = "$EMAIL"
          storage = "/etc/acme.json"
          acmeLogging = true
          entryPoint = "https"
          [acme.httpChallenge]
          entryPoint = "http"
          [[acme.domains]]
          main = "$DOMAIN"
          EOF
          systemctl restart traefik
          
  - path: /usr/local/etc/traefik.toml
    permissions: 0755
    content: |
          logLevel = "INFO"
          checknewversion = false
          defaultEntryPoints = ["http", "https"]
          [kubernetes]
          endpoint = "$ENDPOINT"
          token = "$TOKEN"
          certAuthFilePath = "/etc/kubernetes/pki/ca.crt"
          [entryPoints]
          [entryPoints.http]
          address = ":80"
          [entryPoints.https]
          address = ":443"
          [entryPoints.https.tls]
          [entryPoints.traefik]
          address = "127.0.0.1:8080"
          [api]
          entryPoint = "traefik"
          dashboard = true
  - path: /usr/local/etc/traefik.service
    permissions: 0755
    content: |
          [Unit]
          Description=Traefik service
          After=network.target
          [Install]
          WantedBy=multi-user.target
          [Service]
          Type=simple
          Restart=always
          RestartSec=1
          User=root
          ExecStart=/usr/sbin/traefik --configfile=/etc/traefik.toml
  - path: /usr/local/etc/traefik.yaml
    permissions: 0755
    content: |
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: traefik-ingress-controller
            namespace: kube-system
          ---
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: traefik-ingress-controller
          rules:
            - apiGroups:
                - ""
              resources:
                - services
                - endpoints
                - secrets
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - extensions
              resources:
                - ingresses
              verbs:
                - get
                - list
                - watch
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: traefik-ingress-controller
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: traefik-ingress-controller
          subjects:
          - kind: ServiceAccount
            name: traefik-ingress-controller
            namespace: kube-system
  - path: /usr/local/etc/sample.yaml
    permissions: 0755
    content: |
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: sample
          ---
          kind: PersistentVolumeClaim
          apiVersion: v1
          metadata:
            name: rook-claim
            namespace: sample
          spec:
            storageClassName: rook-ceph-block
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 1Mi
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: nginx-pod
            namespace: sample
            labels:
              app: nginx
          spec:
            initContainers:
            - name: nginx-prepare
              image: busybox
              command: ["sh", "-c", "echo '<h1>Welcome!</h1>' >/usr/share/nginx/html/welcome/index.html"]
              volumeMounts:
              - name: pv
                mountPath: "/usr/share/nginx/html/welcome"
            containers:
            - image: nginx
              name: nginx
              ports:
              - containerPort: 80
              volumeMounts:
              - name: pv
                mountPath: "/usr/share/nginx/html/welcome"
            volumes:
            - name: pv
              persistentVolumeClaim:
                claimName: "rook-claim"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-svc
            namespace: sample
          spec:
            ports:
            - port: 80
              protocol: TCP
              targetPort: 80
            selector:
              app: nginx
          ---
          apiVersion: extensions/v1beta1
          kind: Ingress
          metadata:
            name: nginx-ingress
            namespace: sample
          spec:
            rules:
            - http:
                paths:
                - path: /welcome
                  backend:
                    serviceName: nginx-svc
                    servicePort: 80
